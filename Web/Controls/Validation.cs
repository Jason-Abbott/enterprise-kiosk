using System.Web.UI;
using System.Web.UI.HtmlControls;

namespace Idaho.Web.Controls {
	/// <summary>
	/// Object to hold validation specifications for a given control
	/// </summary>
	/// <remarks>
	/// Though auto-generated by InputControl subclasses, these can also
	/// be placed in page markup, hence it inherits from HtmlControl.
	/// </remarks>
	public class Validation : HtmlControl {

		private Types _type;
		private bool _required = false;
		private string _targetID = string.Empty;
		private string _message = string.Empty;
		private Control _control = null;
		private bool _allowClientOnly = false;

		/// <remarks>
		/// Match validation.js Is[Name] functions
		/// </remarks>
		public enum Types {
			None = 0,
			Select = 1,
			Radio,
			CCExpire,
			BirthDate,
			Date,
			DateTime,
			Money,
			CCN,
			Posting,
			HtmlFile,
			PlainText,
			Image,
			ActiveURL,
			Password,
			CVV,
			Email,
			Zip,
			Zip4,
			ZipCode,
			Numeric,
			URL,
			Name,
			File,
			Phone,
			SSN,
			String,
			ISBN,
			UPC,
			NonZero
		}

		/// <summary>
		/// Message displayed if field is invalid
		/// </summary>
		public string Message { get { return _message; } set { _message = value; } }
		public string ResourceKey { set { _message = Resource.Say(value); } }

		/// <summary>
		/// Allow validation of client-only (no control object) HTML elements
		/// </summary>
		public bool ClientOnly { set { _allowClientOnly = value; } }

		/// <summary>
		/// Type name that matches a function in validation.js with name Is[Type]()
		/// </summary>
		public Types Type { get { return _type; } set { _type = value; } }
		public bool Required { get { return _required; } set { _required = value; } }

		/// <summary>
		/// The server-side ID of the field this validation instance should check
		/// </summary>
		/// <remarks>
		/// Some custom controls render with the ID as the only ID rather than using
		/// ClientID. This will keep track of which ID was used rather than relying
		/// on Control members.
		/// </remarks>
		public string For { set { _targetID = value; } internal get { return _targetID; } }

		public bool IsValid {
			get {
				return (_allowClientOnly && !string.IsNullOrEmpty(_targetID)) || _control != null;
			}
		}

		/// <summary>
		/// The control targeted by this validation
		/// </summary>
		public Control Control {
			get {
				if (_control == null) { _control = this.Parent.FindControl(_targetID); }
				return _control;
			}
			set { _control = value; }
		}
		/// <remarks>
		/// This will only be called for instances created as page controls
		/// rather than the more common instances created by custom controls.
		/// </remarks>
		protected override void OnLoad(System.EventArgs e) {
			if (this.Visible) { this.Register(); }
			base.OnLoad(e);
		}

		/// <summary>
		/// Validation controls are used to generate EcmaScript, not markup
		/// </summary>
		protected override void Render(System.Web.UI.HtmlTextWriter writer) { }

		/// <summary>
		/// Add reference to self in page for easier rendering
		/// </summary>
		public void Register(Idaho.Web.Page page) { page.Validation.Add(this); }
		public void Register() { this.Register((Idaho.Web.Page)this.Page); }
	}
}